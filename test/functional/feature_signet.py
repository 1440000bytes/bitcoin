#!/usr/bin/env python3
# Copyright (c) 2019-2020 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
"""Test basic signet functionality"""

from decimal import Decimal

from test_framework.test_framework import BitcoinTestFramework
from test_framework.util import assert_equal

signet_blocks = [
    '000000209d7961aee045f252e2653297ff04985bc9e70fea2a15b7c79eaf677f2d030000c18056977d14f38c21c844a9a5e0709a71c9479343149d8bc29d1d6eb9f3eca2c045315f28dc2a1ea5c4020001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025151feffffff0200f2052a01000000000000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa24900473044022006cc48d7c3f13ce39ceaa8b4a0bb90dc3912f303b909c79ff02ecbc80136cbce0220353a8353542812ae4ee84b669dcfb28f6417258122e8268b58903c3a25f28729010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020bc632b80f00c410c9ba86f4b208c95ebe41531f737a39c668c9bab17b5180000a5b1ec07c41066c837ecb7fc15d648bef65e7b4ba87b6c9dde1a1a36937d734fc545315f28dc2a1e562a040001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025251feffffff0200f2052a01000000000000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa2490047304402201b9dedfb80346b66fd8962a0f874de88b578d7008cf9c38525c0ea823c3036ba022012d8eb97c5e66b406e7f510bac1480523ce90da0c8706ddd5481f349498da1b9010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020fa337bb2bdf372bfdbab85b8d56325b3e566ab8c0c24ec03ce9641eeae250000d9cb0ae3e04f2f330b96dd6182fe3d6e0c02f468d8203085843825087ee69c3214bb315f28dc2a1e9b5e0a0001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025351feffffff0200f2052a01000000000000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa249004730440220415b7172231277ef85ec2516177f1316628c99c4c35e00f9c8b5de488c02463902205342dafbbf3922ffbbc46d692a5fa8b47afd977453aac530de14bc7424bda085010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '0000002016d90f09ec92b66e7233c796bd1ef64fc022b26be70b04b3614eba02b114000056da87b60f9517926611db57d785d91cc905089018ab976ef0a07e27cbe73ec5ceff315f28dc2a1e1450080001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025451feffffff0200f2052a01000000000000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa249004730440220378df0d77b449096b5b5475586ee1b2834044219b4bbff8080380701ed48b52602205d73312e4ce98360f1fc5c0951a7fb6b7fb26cc3d198afc960f025601f76e9f4010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020771037dd773ff36da73d886c1b438e6d07c4d85c0a8d704bce82fb4c761c00006b7e50cb80afedc2ed4bf48ca27476f055aeac59f9ba6c6a30fc8b464b866c6e9000325f28dc2a1e82e4020001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025551feffffff0200f2052a01000000160014218756592118b9349807ce9fd91d2bdc254d79730000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa2490047304402203f254ee2a4958382f17920c5a7067f1fe4d5810c6ab9b02a2c3dc730caa46de802207d8cf6038e78f06337365ab76eababed0078f46375e3994e66f3bf08df48d830010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020a6143c64d2d72db0740b78ae82a4b522125d0c1d431c2d636cb04789600a0000bb11dac7fd024ada923231bd0d17107facc4e2989cda9c0e8b4ff4cdfba414379600325f28dc2a1e492f120001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025651feffffff0200f2052a01000000160014218756592118b9349807ce9fd91d2bdc254d79730000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa249004730440220145e90993a216261a685263619056e1e7504ccbac0a6139e3cb68d4102266fa10220380054d093bf58a9afbdc0d5b321d7fc688823e85248bd37d9d8d8e49497a7ff010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020eb7e4051e7bd10636d5e7380ca74771b284425bf69637d2c88e841d33e0500007768a8a6536a5d55b2125fd1fd80fbc1a5722728cf1668ffc2faaa9a83d5a6ee261a325f28dc2a1e8127000001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025751feffffff0200f2052a0100000047512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae0000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa2490047304402204109f2014dd4a9bcbdb43b14a67eb2dd11d55bc205b20cb73884d2d01af466400220209a14c5d38d0f36b080f0d3807917340e0db8fbaa327ce58a44aed5228112eb010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '000000204765c5525340783e50e5ab9a60ed45247c0a5376d113ab9027d04524dd260000bfae9d0edb60bcc8314458341a13d5f8d2def60b61abceaf1dda8a03ec7c71c92a1a325f28dc2a1e6d14000001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025851feffffff0200f2052a0100000047512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae0000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa249004730440220179ce76d5f2293a781348eec5ced16ca68d0e12dfda30f169ef8f78952e2242002207a1e848f16019376ada366f00e3d2b48d210bc9f2e2f73c2b82bbd2d170d608d010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '0000002090e20d551753314673ab7b35a4e79276b50b2742acb94d6898f68b8bcb160000cdcb82f191a03ac8d759e33adeaa806d840f1a5aab27d87d62528c834cc8f55d131b325f28dc2a1e791a010001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025951feffffff0200f2052a0100000047512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae0000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa24900473044022052c9fae3f5d4d3e608f71222f15ff6250d70c38877a929a6e3e790b941ca67c1022053f259179e007e184b7fbbd3f0f65b9563f932149f20c4aa772ad6c4343ce59d010120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020bbb57e867e82507e4643c6ecdd3c1c185745dbcbf6cd12c72736764ea52a000054f1ff647eef12aa3659d102fccbf9e09f9201bc5372c9e0f29b9e74bec44b29261b325f28dc2a1e9d97000001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025a51feffffff0200f2052a0100000047512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae0000000000000000766a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4eecc7daa24900473044022070264c40d291b035dc734d8faec72302b478869fa6a06e5cf42a3ef11da476b102207bc0817928969ba9aa036739061dfef9edf79ea0638e539e0fd2f30439c2df59010120000000000000000000000000000000000000000000000000000000000000000000000000',
]

class SignetBasicTest(BitcoinTestFramework):
    def set_test_params(self):
        self.chain = "signet"
        self.num_nodes = 6
        self.setup_clean_chain = True
        shared_args1 = ["-signet_challenge=51"] # OP_TRUE
        shared_args2 = []                         # default challenge
        # we use the exact same challenge except we do it as a 2-of-2, which means it should fail
        shared_args3 = ["-signet_challenge=522103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae"]

        self.extra_args = [
            shared_args1, shared_args1,
            shared_args2, shared_args2,
            shared_args3, shared_args3,
        ]

    def skip_test_if_missing_module(self):
        self.skip_if_no_wallet()

    def run_test(self):
        self.log.info("basic tests using OP_TRUE challenge")

        self.log.info('getmininginfo')
        mining_info = self.nodes[0].getmininginfo()
        assert_equal(mining_info['blocks'], 0)
        assert_equal(mining_info['chain'], 'signet')
        assert 'currentblocktx' not in mining_info
        assert 'currentblockweight' not in mining_info
        assert_equal(mining_info['networkhashps'], Decimal('0'))
        assert_equal(mining_info['pooledtx'], 0)

        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())
        tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit', 'signet']})
        self.log.info("getblocktemplate: Test capability advertised")
        assert 'proposal' in tmpl['capabilities']
        assert 'coinbasetxn' not in tmpl

        self.log.info("pregenerated signet blocks check")

        height = 0
        for block in signet_blocks:
            assert_equal(self.nodes[2].submitblock(block), None)
            height = height + 1
            assert_equal(self.nodes[2].getblockcount(), height)

        self.log.info("pregenerated signet blocks check (incompatible solution)")

        assert_equal(self.nodes[4].submitblock(signet_blocks[0]), 'bad-signet-blksig')

if __name__ == '__main__':
    SignetBasicTest().main()
